///<reference path="../../node_modules/tsd-goalazo-models/models.d.ts"/>
///<reference path="../../typings/q/Q.d.ts"/>
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Q = require('q');
var index_1 = require('../../models/index');
var BaseRepo_1 = require("../BaseRepo");
var UserRepoUno = (function (_super) {
    __extends(UserRepoUno, _super);
    function UserRepoUno() {
        _super.apply(this, arguments);
    }
    UserRepoUno.prototype.getUser = function (name) {
        return Q.when()
            .then(function () { return index_1["default"].User.find({
            where: {
                name: name
            }
        }); });
    };
    UserRepoUno.prototype.setUser = function (isAutoGenerated, name, password) {
        return Q.when()
            .then(function () { return index_1["default"].User.create({
            name: name,
            password: password,
            isAutoGenerated: isAutoGenerated
        }); });
    };
    UserRepoUno.prototype.getUserFilters = function (userId, limit) {
        return Q.when()
            .then(function () { return index_1["default"].Filter.findAll({
            include: [
                {
                    model: index_1["default"].User,
                    as: 'users',
                    where: {
                        id: userId
                    }
                },
                {
                    model: index_1["default"].CompetitionSeries,
                    as: 'competitionSeries'
                },
                {
                    model: index_1["default"].Team,
                    as: 'teams'
                }
            ],
            limit: limit
        }); });
    };
    UserRepoUno.prototype.setUserFilter = function (userId, filterId, transaction) {
        return Q.when()
            .then(function () { return index_1["default"].UserFilter.create({ userId: userId, filterId: filterId }, { transaction: transaction }); });
    };
    return UserRepoUno;
})(BaseRepo_1.BaseRepo);
exports.UserRepoUno = UserRepoUno;
//# sourceMappingURL=UserRepoUno.js.map