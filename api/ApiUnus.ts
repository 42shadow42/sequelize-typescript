///<reference path="../typings/bluebird/bluebird.d.ts"/>
///<reference path="../typings/q/Q.d.ts"/>
///<reference path="../node_modules/tsd-goalazo-models/models.d.ts"/>
///<reference path="../node_modules/tsd-http-status-codes/HttpStatus.d.ts"/>

import express = require('express');
import Q = require('q');
import ICompetitionSeries = goalazo.ICompetitionSeries;
import ITeam = goalazo.ITeam;
import {config} from '../config';
import {ApiRequest} from '../typings/custom/requesting';
import {ApiAbstract} from './ApiAbstract';
import {TeamSvcUno} from "../services/Team/TeamSvcUno";
import {CompetitionSeriesSvcUno} from '../services/competitionSeries/CompetitionSeriesSvcUno';
import {ICompetitionTeamsRequest} from "../typings/custom/requesting";
import {CompetitionSvcUno} from "../services/competition/CompetitionSvcUno";
import {CountrySvcUno} from "../services/country/CountrySvcUno";
import {ICountryTeamsRequest} from "../typings/custom/requesting";
import {IUserRequest} from "../typings/custom/requesting";
import {UserSvcUno} from "../services/user/UserSvcUno";
import {IUserFilterPostRequest} from "../typings/custom/requesting";
import ICountry = goalazo.ICountry;
import ICompetition = goalazo.ICompetition;
import IAuthUser = goalazo.IAuthUser;
import {Util} from "../uitils/Util";
import {CodeError, ErrorCode} from "../uitils/CodeError";
import {FilterSvcUno} from "../services/filter/FilterSvcUno";
import IMatch = goalazo.IMatch;
import {IFilterMatchesGetRequest} from "../typings/custom/requesting";

export class ApiUnus extends ApiAbstract {

    protected competitionSeriesSvc: CompetitionSeriesSvcUno;
    protected competitionSvc: CompetitionSvcUno;
    protected countrySvc: CountrySvcUno;
    protected teamSvc: TeamSvcUno;
    protected userSvc: UserSvcUno;
    protected filterSvc: FilterSvcUno;

    constructor() {

        super();

        this.competitionSeriesSvc = new CompetitionSeriesSvcUno();
        this.competitionSvc = new CompetitionSvcUno();
        this.countrySvc = new CountrySvcUno();
        this.teamSvc = new TeamSvcUno();
        this.userSvc = new UserSvcUno();
        this.filterSvc = new FilterSvcUno();
    }

    // USER
    // --------------

    /**
     * @api {post} /users Create a new User.
     * @apiVersion 1.0.0
     * @apiName postUser
     * @apiGroup User
     *
     * @apiParam {String} [name]  Optional name of User.
     * @apiParam {String} [password]  Optional password of User.
     *
     * @apiDescription In case of no parameters an auto generated User will be created.
     *
     *
     * @apiSuccessExample Success-Response:
     *      HTTP/1.1 200 OK
     *      {
     *          "id": 9,
     *          "name": "4b6f8fb0-764d-11e5-987d-fb9ad068e903",
     *          "isAutoGenerated": true,
     *          "iat": 1445251005,
     *          "exp": 1445337405,
     *          "token": "eyJ0eXAiOiJKV1QiLCJh...t6DiEnyt4fcHQ"
     *      }
     *
     */
    postUser(req: IUserRequest, res: express.Response, next: any): void {

        var data = req.body;

        if ((!data.name && !data.password) ||
            data.name && data.password) {

            this.userSvc.register(data.name, data.password)
                .then((user) => res.json(user))
                .catch(next)
            ;
        } else {

            res.status(HttpStatus.BadRequest).send(`Both name and password should be provided
            or no parameter for an auto generated user`);
        }
    }

    /**
     * @api {post} /users/auth Authenticate User and returns an User object with authentication token.
     * @apiVersion 1.0.0
     * @apiName authUser
     * @apiGroup User
     *
     * @apiParam {String} name  Name of User.
     * @apiParam {String} [password]  Optional password of User.
     *
     * @apiDescription In case of no password, the User has to be auto generated, otherwise it
     *                  is not possible to authenticate.
     *
     *
     * @apiSuccessExample Success-Response:
     *      HTTP/1.1 200 OK
     *      {
     *          "id": 9,
     *          "name": "4b6f8fb0-764d-11e5-987d-fb9ad068e903",
     *          "isAutoGenerated": true,
     *          "iat": 1445251005,
     *          "exp": 1445337405,
     *          "token": "eyJ0eXAiOiJKV1QiLCJh...t6DiEnyt4fcHQ"
     *      }
     *
     */
    authUser(req: IUserRequest, res: express.Response, next: any): void {

        var data = req.body;

        this.userSvc.authenticate(data.name, data.password)
            .then((user) => res.json(user))
            .catch((err) => {

                if(err instanceof CodeError && (<CodeError>err).code === ErrorCode.AuthenticationFailed) {

                    res.sendStatus(HttpStatus.Forbidden);
                } else {
                    next(err);
                }
            })
        ;
    }


    getUserFilters(req: IUserRequest, res: express.Response, next: any): void {

        this.userSvc.getUserFilters(req.user, req.query.limit)
            .then((filters) => res.json(filters))
            .catch(next)
    }

    /**
     * @api {post} /users/me/filters Creates a new Filter linked to the current User.
     * @apiVersion 1.0.0
     * @apiName postUserFilter
     * @apiGroup User
     *
     * @apiParam {String} filterName  Filter name of to be created Filter.
     * @apiParam {Integer[]} [teamIds]  IDs of Teams the Filter should be linked to.
     * @apiParam {Integer[]} [competitionSeriesIds]  IDs of CompetitionSeries the Filter should be linked to.
     *
     * @apiDescription There is at least one of these both parameters: teamIds or competitionSeriesIds necessary.
     *
     * @apiSuccessExample Success-Response:
     *      HTTP/1.1 200 OK
     *
     */
    postUserFilter(req: IUserFilterPostRequest, res: express.Response, next: any): void {

        var data = req.body;

        data.teamIds = Util.toArrayIfExists<number>(data.teamIds);
        data.competitionSeriesIds = Util.toArrayIfExists<number>(data.competitionSeriesIds);

        if (data.filterName && (data.teamIds || data.competitionSeriesIds)) {

            this.userSvc.setUserFilter(req.user, data.filterName, data.teamIds, data.competitionSeriesIds)
                .then(() => res.sendStatus(HttpStatus.OK))
                .catch(next)
        } else {

            res.status(HttpStatus.BadRequest).send(`Parameters missing: filterName and teamIds or competitionSeriesIds`);
        }
    }

    // COUNTRIES
    // --------------

    /**
     * @api {post} /countries Returns a list of Countries (restricted by internal max limit).
     * @apiVersion 1.0.0
     * @apiName getCountries
     * @apiGroup Countries
     *
     * @apiParam {Integer} limit  Limit of country list.
     *
     *
     * @apiSuccessExample Success-Response:
     *      HTTP/1.1 200 OK
     *
     *      [
     *          {
     *              "id": 1,
     *              "name": "Deutschland"
     *          },
     *          {
     *              "id": 2,
     *              "name": "Italien"
     *          }
     *      ]
     *
     */
    getCountries(req: ApiRequest, res: express.Response, next: any): void {

        this.countrySvc.getCountries(req.query.limit)
            .then((countries: ICountry[]) => {

                res.json(countries);
            })
            .catch(next)
    }


    getCountryCompetitions(req: ICountryTeamsRequest, res: express.Response, next: any): void {

        this.countrySvc.getCountryCompetitions(req.params.countryId, req.query.limit)
            .then((competitions: ICompetition[]) => {

                res.json(competitions);
            })
            .catch(next);
    }

    // COMPETITION SERIES
    // --------------

    getCompetitionSeries(req: ApiRequest, res: express.Response, next: any): void {

        Q.when<ICompetitionSeries[]>(null)
            .then(() => this.competitionSeriesSvc.getCompetitionSeries())
            .then((competitionSeries: ICompetitionSeries[]) => {

                res.json(competitionSeries);
            })
            .catch(next)
        ;
    }


    // COMPETITION
    // --------------

    getCompetitionTeams(req: ICompetitionTeamsRequest, res: express.Response, next: any): void {

        Q.when<ITeam[]>(null)
            .then(() => this.competitionSvc.getCompetitionTeams(req.params.competitionId, req.query.limit))
            .then((teams: ITeam[]) => {

                res.json(teams);
            })
            .catch(next)

    }

    // FILTER
    // --------------

    getFilterMatches(req: IFilterMatchesGetRequest, res: express.Response, next: any): void {

        Q.when<IMatch[]>(null)
            .then(() => this.filterSvc.getFilterMatches(req.params.filterId))
            .then((matches: IMatch[]) => {

                res.json(matches);
            })
            .catch(next)
        ;
    }

    // TEAM
    // --------------

    getTeams(req: ApiRequest, res: express.Response, next: any): void {

        Q.when<ITeam[]>(null)
            .then(() => this.teamSvc.getTeams())
            .then((teams: ITeam[]) => {

                res.json(teams);
            })
            .catch(next)
        ;
    }

    // MIDDLEWARE
    // ---------------------------

    checkRequestFilterMiddleware(req: ApiRequest, res: express.Response, next: Function) {

        if (req.query.limit > config.request.maxLimit) {

            // if limit is higher than configured max
            // response with BAD REQUEST
            res.status(HttpStatus.BadRequest).send('Maximal limit for data request is ' + config.request.maxLimit);
            return;
        } else if (!req.query.limit) {

            // if no limit is defined, set limit to maxLimit
            req.query.limit = config.request.maxLimit;
        }

        next();
    }

    checkAuthenticationMiddleWare(req: ApiRequest, res: express.Response, next: any): void {

        var token = req.headers[config.request.accessTokenHeader];

        if (!token) {

            res.sendStatus(HttpStatus.Unauthorized);
        }

        this.userSvc.checkAuthentication(token)
            .then((user: IAuthUser) => {

                req.user = user;
                next();
            })
            .catch(() => {

                res.status(HttpStatus.Unauthorized);
            })
    }
}

